events {
    worker_connections 1024;
}

http {
    upstream springboot {
        server springboot-app:8080;
    }
    
    upstream php {
        server php-app:80;
    }
    
    upstream nodejs {
        server nodejs-app:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Spring Boot API routes
        location /api/springboot/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://springboot/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # PHP API routes
        location /api/php/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://php/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Node.js API routes
        location /api/nodejs/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://nodejs/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Direct access to services
        location /springboot {
            proxy_pass http://springboot/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /php {
            proxy_pass http://php/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /nodejs {
            proxy_pass http://nodejs/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root path - show service overview
        location / {
            return 200 '
<!DOCTYPE html>
<html>
<head>
    <title>Multi-Stack Docker Application</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 30px 0; }
        .service { padding: 20px; border: 1px solid #ddd; border-radius: 5px; background: #f8f9fa; }
        .service h3 { margin-top: 0; color: #007bff; }
        .endpoint { background: #e9ecef; padding: 8px; margin: 5px 0; border-radius: 3px; font-family: monospace; font-size: 14px; }
        .method { color: #28a745; font-weight: bold; }
        .url { color: #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üê≥ Multi-Stack Docker Application</h1>
        <p>Welcome to the multi-stack application running with Docker Compose!</p>
        
        <div class="services">
            <div class="service">
                <h3>‚òï Spring Boot (Java)</h3>
                <p>REST API running on port 8080</p>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/springboot/api/users</span></div>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/api/springboot/api/users</span></div>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/springboot/api/users/health</span></div>
            </div>
            
            <div class="service">
                <h3>üêò PHP</h3>
                <p>Web application running on port 8000</p>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/php</span></div>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/api/php/api/users</span></div>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/php/api/health</span></div>
            </div>
            
            <div class="service">
                <h3>üöÄ Node.js</h3>
                <p>Express API running on port 3000</p>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/nodejs</span></div>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/api/nodejs/api/users</span></div>
                <div class="endpoint"><span class="method">GET</span> <span class="url">/nodejs/api/health</span></div>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding: 20px; background: #e3f2fd; border-radius: 5px;">
            <h3>üîó Direct Access</h3>
            <p>You can also access services directly:</p>
            <p><strong>Spring Boot:</strong> <a href="http://localhost:8080" target="_blank">http://localhost:8080</a></p>
            <p><strong>PHP:</strong> <a href="http://localhost:8000" target="_blank">http://localhost:8000</a></p>
            <p><strong>Node.js:</strong> <a href="http://localhost:3000" target="_blank">http://localhost:3000</a></p>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}